// ****************************************************************************
//  ids.tbl                                                      DB48X project
// ****************************************************************************
//
//   File Description:
//
//     List of all IDs for RPL opcodes
//
//      ID(i)      defines an ID that is not parseable as a command, e.g. types
//      CMD(i)     defines an ID that is parseable as a command, e.g. "drop"
//      OP(i,n)    defines an operator ID, e.g. "+"
//      NAMED(i,l) defines an ID with an alternate long spelling, e.g. dup
//
//
//
//
// ****************************************************************************
//   (C) 2022 Christophe de Dinechin <christophe@dinechin.org>
//   This software is licensed under the terms outlined in LICENSE.txt
// ****************************************************************************
//   This file is part of DB48X.
//
//   DB48X is free software: you can redistribute it and/or modify
//   it under the terms outlined in the LICENSE.txt file
//
//   DB48X is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// ****************************************************************************

// Commands, e.g. "swap"
#ifndef CMD
#define CMD(id)                 ID(id)
#endif

// Commands with a long name, e.g. "neg" can be called "Negate"
#ifndef NAMED
#define NAMED(id, longname)     CMD(id)
#endif

// Operators, e.g. "+"
#ifndef OP
#define OP(i, n)                NAMED(i, n)
#endif

// Aliases for commands with multiple spelling
#ifndef ALIAS
#define ALIAS(op, name)
#endif

#ifndef MENU
#define MENU(id)                ID(id)
#endif

#ifndef FLAGS
#define FLAGS(name, ...)
#endif

// ============================================================================
//
//   Range of types for attributes
//
// ============================================================================

FLAGS(is_type,          directory,      decimal128)
#if CONFIG_FIXED_BASED_OBJECTS
FLAGS(is_integer,       hex_integer,    neg_integer)
FLAGS(is_based,         hex_integer,    based_integer, hex_bignum, based_bignum)
FLAGS(is_bignum,        hex_bignum,     neg_bignum)
#else
FLAGS(is_integer,       based_integer,  neg_integer)
FLAGS(is_based,         based_integer,  based_integer, based_bignum, based_bignum)
FLAGS(is_bignum,        based_bignum,     neg_bignum)
#endif // CONFIG_FIXED_BASED_OBJECTS
FLAGS(is_fraction,      fraction,       neg_big_fraction)
FLAGS(is_decimal,       decimal32,      decimal128)
FLAGS(is_real,          bignum,         decimal128)
FLAGS(is_complex,       rectangular,    polar)
FLAGS(is_command,       Drop,           Unimplemented)
FLAGS(is_symbolic,      local,          equation,       pi, ImaginaryUnit)
FLAGS(is_algebraic,     add,            ToFraction)
FLAGS(is_immediate,     MainMenu,       LastMenu)



// ============================================================================
//
//   Definition of types
//
// ============================================================================

ID(object)                      // Value 0 is reserved for "not implemented"


ID(directory)
ID(text)
ID(list)
ID(program)
ID(block)                       // Blocks, e.g. inside loops
ID(array)
ID(menu)
ID(locals)                      // Block with locals

ID(local)
ID(symbol)
ID(equation)

// Complex types must be parsed before numbers
ID(rectangular)
ID(polar)

#if CONFIG_FIXED_BASED_OBJECTS
ID(hex_integer)
ID(dec_integer)
ID(oct_integer)
ID(bin_integer)
#endif // CONFIG_FIXED_BASED_OBJECTS
ID(based_integer)

#if CONFIG_FIXED_BASED_OBJECTS
ID(hex_bignum)
ID(dec_bignum)
ID(oct_bignum)
ID(bin_bignum)
#endif // CONFIG_FIXED_BASED_OBJECTS
ID(based_bignum)

ID(bignum)
ID(neg_bignum)

ID(integer)
ID(neg_integer)

ID(fraction)
ID(neg_fraction)
ID(big_fraction)
ID(neg_big_fraction)

ID(decimal32)
ID(decimal64)
ID(decimal128)

CMD(Drop)
CMD(Drop2)
CMD(DropN)
NAMED(Dup,  "Duplicate")
NAMED(Dup2, "Duplicate2")
NAMED(DupN, "DuplicateN")
CMD(Swap)
CMD(Over)
CMD(Pick)
CMD(Rot)
CMD(Roll)
NAMED(RollD, "RollDown")
NAMED(Eval, "Evaluate")
NAMED(Sto, "Store")
NAMED(Rcl, "Recall")

CMD(True)
CMD(False)

NAMED(ToText, "→Text")
ALIAS(ToText, "→Str")

NAMED(pi, "π")
NAMED(ImaginaryUnit, "ⅈ")

OP(add, "+")
OP(sub, "-")
OP(mul, "×")
OP(div, "÷")
ALIAS(mul, "*")
ALIAS(div, "/")
CMD(mod)
CMD(rem)

NAMED(neg, "Negate")
NAMED(inv, "x⁻¹")
NAMED(sq,  "x²")
NAMED(cubed, "x³")

NAMED(sqrt, "√")

NAMED(abs, "norm")
ALIAS(abs, "modulus")

OP(And,         "and")
OP(Or,          "or")
OP(Xor,         "xor")
OP(NAnd,        "nand")
OP(NOr,         "nor")
OP(Implies,     "implies")
OP(Equiv,       "equiv")
OP(Excludes,    "excludes")
OP(Not,         "not")

CMD(same)                       // HP48 distinguises == and same
NAMED(TestSame, "==")           // Must be before =
NAMED(TestLT,   "<")
NAMED(TestEQ,   "=")
NAMED(TestGT,   ">")
NAMED(TestLE,   "≤")
NAMED(TestNE,   "≠")
NAMED(TestGE,   "≥")

NAMED(asin, "sin⁻¹")            // WARNING: order used in functions.cc
NAMED(acos,  "cos⁻¹")
NAMED(atan,  "tan⁻¹")
CMD(sin)
CMD(cos)
CMD(tan)                        // WARNING: order used in function.cc

NAMED(asinh, "sinh⁻¹")
NAMED(acosh, "cosh⁻¹")
NAMED(atanh, "tanh⁻¹")
CMD(sinh)
CMD(cosh)
CMD(tanh)

CMD(log1p)
ALIAS(log1p, "lnp1")            // HP48 compatibility
CMD(expm1)
ALIAS(expm1, "expm")            // HP48 compatibility
CMD(log)
CMD(log10)
CMD(log2)
CMD(exp)
CMD(exp10)
CMD(exp2)
CMD(erf)
CMD(erfc)
NAMED(tgamma, "Gamma")
CMD(lgamma)
NAMED(fact, "!")
ALIAS(fact, "factorial")

NAMED(cbrt, "∛")
OP(pow, "↑")
ALIAS(pow, "^")
OP(hypot, "⊿")
OP(atan2, "∠")

CMD(sign)

CMD(re)
CMD(im)
CMD(arg)
CMD(conj)
NAMED(det, "Determinant")

NAMED(ToDecimal, "→Num")
ALIAS(ToDecimal, "→Decimal")
NAMED(ToFraction, "→Frac")         // Last algebraic
ALIAS(ToFraction, "→Q")


// ============================================================================
//
//    Loops
//
// ============================================================================

CMD(IfThen)
CMD(IfThenElse)
CMD(DoUntil)
CMD(WhileRepeat)
CMD(StartNext)
CMD(StartStep)
CMD(ForNext)
CMD(ForStep)


// ============================================================================
//
//   Non-algebraic commands below (cannot go in equations)
//
// ============================================================================

CMD(Depth)
NAMED(ToList, "→List")
CMD(Get)

/// Equations
CMD(Rewrite)
CMD(Expand)
CMD(Collect)
CMD(Simplify)

// Complex numbers
NAMED(RealToComplex, "ℝ→ℂ")
ALIAS(RealToComplex, "R→C")
NAMED(ComplexToReal, "ℂ→ℝ")
ALIAS(ComplexToReal, "C→R")
NAMED(ToRectangular, "→Rectangular")
ALIAS(ToRectangular, "→Rect")
NAMED(ToPolar, "→Polar")

// Memory management
CMD(Purge)
CMD(PurgeAll)
NAMED(Mem, "AvailableMemory")
CMD(FreeMemory)
CMD(SystemMemory)
CMD(GarbageCollect)
CMD(HomeDirectory)

CMD(Ticks)
CMD(Bytes)
CMD(Type)
CMD(TypeName)

NAMED(IFT, "IfThen")
NAMED(IFTE, "IfThenElse")
CMD(IfErrThen)
CMD(IfErrThenElse)
NAMED(errm, "ErrorMessage")
NAMED(errn, "ErrorNumber")
NAMED(err0, "ClearError")
NAMED(doerr, "DoError")

NAMED(disp, "DisplayText")
NAMED(dispxy, "DisplayStyledText")
NAMED(cllcd, "ClearLCD")


// ============================================================================
//
//   Settings
//
// ============================================================================

NAMED(Std, "StandardDisplay")
NAMED(Fix, "FixedDisplay")
NAMED(Sci, "ScientificDisplay")
NAMED(Eng, "EngineeringDisplay")
NAMED(Sig, "SignificantDisplay")

NAMED(Deg, "Degrees")
NAMED(Rad, "Radians")
NAMED(Grad, "Grads")
CMD(PiRadians)

CMD(LowerCase)
CMD(UpperCase)
CMD(Capitalized)
CMD(LongForm)

CMD(DecimalDot)
CMD(DecimalComma)
CMD(NoTrailingDecimal)
CMD(TrailingDecimal)
CMD(Precision)
CMD(StandardExponent)
CMD(FancyExponent)
CMD(ClassicExponent)

CMD(Base)
NAMED(Bin, "Binary")
NAMED(Oct, "Octal")
NAMED(Dec, "Decimal")
NAMED(Hex, "Hexadeimcal")

NAMED(stws, "StoreWordSize")
NAMED(rcws, "WordSize")

CMD(ResultFontSize)
CMD(StackFontSize)
CMD(EditorFontSize)
CMD(EditorMultilineFontSize)

CMD(NumberSpacing)
CMD(MantissaSpacing)
CMD(FractionSpacing)
CMD(BasedSpacing)

CMD(NumberSpaces)
CMD(NumberDotOrComma)
CMD(NumberTicks)
CMD(NumberUnderscore)
CMD(BasedSpaces)
CMD(BasedDotOrComma)
CMD(BasedTicks)
CMD(BasedUnderscore)

CMD(AutoSimplify)
CMD(NoAutoSimplify)

CMD(MaxBigNumBits)
CMD(MaxRewrites)

NAMED(ToFractionIterations, "→FracIterations")
ALIAS(ToFractionIterations, "→QIterations")
NAMED(ToFractionDigits, "→FracDigits")
ALIAS(ToFractionDigits, "→QDigits")

CMD(Modes)
CMD(Version)


// ============================================================================
//
//   Menus
//
// ============================================================================

MENU(MainMenu)
MENU(HomeMenu)

MENU(MathMenu)
MENU(RealMenu)
MENU(PartsMenu)
MENU(FractionsMenu)
MENU(PowersMenu)
MENU(ComplexMenu)
MENU(VectorMenu)
MENU(MatrixMenu)
MENU(AnglesMenu)
MENU(HyperbolicMenu)
MENU(CircularMenu)
MENU(BasesMenu)
MENU(ProbabilitiesMenu)
MENU(StatisticsMenu)
MENU(SignalProcessingMenu)
MENU(ConstantsMenu)
MENU(EquationsMenu)
MENU(UnitsMenu)
MENU(UnitsConversionsMenu)
MENU(SymbolicMenu)
MENU(SolverMenu)
MENU(NumericalSolverMenu)
MENU(DifferentialSolverMenu)
MENU(SymbolicSolverMenu)
MENU(PolynomialSolverMenu)
MENU(LinearSolverMenu)
MENU(MultiSolverMenu)
MENU(FinanceSolverMenu)

MENU(ProgramMenu)
MENU(TestsMenu)
MENU(CompareMenu)
MENU(LoopsMenu)
MENU(ListMenu)
MENU(StackMenu)
MENU(ObjectMenu)
MENU(FlagsMenu)
MENU(LastThingsMenu)
MENU(CharsMenu)
MENU(ModesMenu)
MENU(FontsMenu)
MENU(IOMenu)
MENU(TimeMenu)
MENU(PlotMenu)
MENU(MemMenu)
MENU(LibsMenu)
MENU(TextMenu)


// ============================================================================
//
//   Special menus and menu commands
//
// ============================================================================

CMD(VariablesMenu)
CMD(ToolsMenu)
CMD(Catalog)
CMD(LastMenu)                   // Last immediate command

NAMED(Off, "PowerOff")
CMD(SaveState)
CMD(SystemSetup)
CMD(Help)

CMD(Unimplemented)


// ============================================================================
//
//   Commands that we don't want to see appear in the catalog
//
// ============================================================================

CMD(MenuNextPage)
CMD(MenuPreviousPage)
CMD(MenuFirstPage)

CMD(VariablesMenuExecute)
CMD(VariablesMenuRecall)
CMD(VariablesMenuStore)
CMD(SelfInsert)


// ============================================================================
//
//   Special objects
//
// ============================================================================

ID(font)
ID(dense_font)
ID(sparse_font)
ID(dmcp_font)



#undef ID
#undef OP
#undef CMD
#undef MENU
#undef NAMED
#undef ALIAS
#undef FLAGS
